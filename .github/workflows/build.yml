name: Build Electron App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.18.1'
        npm-version: '10.9.2'

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

    - name: Install build tools (Linux only)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Install dependencies
      run: npm install --no-cache --verbose --force --no-audit 

    - name: Ensure build directory exists
      run: mkdir -p dist
        
    - name: Build for specific platform
      run: |
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          npm run dist -- --linux
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          npm run dist -- --mac
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
          npm run dist -- --win
        else
          echo "Unsupported platform: ${{ matrix.os }}"
          exit 1
        fi
      env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}  # Pass the token as an environment variable
      shell: bash  # Use bash for Linux and macOS

    - name: Check if build directory exists
      run: |
        if [ ! -d "dist" ]; then
          echo "Error: dist directory not found."
          exit 1
        fi
      shell: bash  # Use bash for Linux and macOS

    #- name: Get version from package.json
    #  id: get_version
    #  run: echo "VERSION=$(node -p \"require('./package.json').version\")" >> $GITHUB_ENV || { echo "Failed to get version from package.json"; exit 1; }
      #shell: bash  # Ensure this runs in bash
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: electron-app-${{ env.VERSION }}-${{ matrix.os }}
        path: |
          dist/*.deb
          dist/*.exe
          dist/*.AppImage
          dist/*.dmg
        if-no-files-found: error

    - name: Build for Windows
      if: runner.os == 'Windows'
      run: |
        npm run dist -- --win
      shell: pwsh  # Use PowerShell for Windows
