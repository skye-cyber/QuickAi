name: Build Electron App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.18.1'
        # npm-version: '10.9.2'

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

    - name: Install build tools (Linux only)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential

    - name: Install dependencies
      run: npm install --no-cache --verbose --force --no-audit --production

    - name: Install electron builder
      run: npm install electron-builder --save
      
    - name: Get current version from package.json
      id: get_version
      run: |
        if [ "${{ runner.os }}" == "Windows" ]; then
          echo "CURRENT_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
        else
          echo "CURRENT_VERSION=$(node -p 'require("./package.json").version')'" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Check for previous version
      id: check_version
      run: |
        if [ -f last_version.txt ]; then
          LAST_VERSION=$(cat last_version.txt)
          echo "Last version: $LAST_VERSION"
          echo "Current version: $CURRENT_VERSION"
          if [ "$CURRENT_VERSION" == "$LAST_VERSION" ]; then
            echo "No new version detected. Exiting."
            exit 0
          fi
        else
          echo "No previous version found. Proceeding with build."
        fi
      shell: bash

    - name: Clean dist directory
      run: rm -rf dist/*
      shell: bash

    - name: Ensure build directory exists
      run: mkdir -p dist
      shell: bash

    - name: Build for specific platform
      run: |
        if [ "${{ runner.os }}" == "Linux" ]; then
          npm run dist -- --linux
        elif [ "${{ runner.os }}" == "macOS" ]; then
          npm run dist -- --mac
        elif [ "${{ runner.os }}" == "Windows" ]; then
          npm run dist -- --win
        else
          echo "Unsupported platform: ${{ runner.os }}"
          exit 1
        fi
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      shell: bash

    - name: Check if build directory exists
      run: |
        if [ ! -d "dist" ]; then
          echo "Error: dist directory not found."
          exit 1
        fi
      shell: bash

    - name: show dist contet
      run: |
        if [ "${{ runner.os }}" == "Linux" ]; then
        ls dist
        fi
      shell: bash
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: electron-app-${{ env.CURRENT_VERSION }}-${{ runner.os }}
        path: |
          dist/*.deb
          dist/*.exe
          dist/*.AppImage
          dist/*.dmg
        if-no-files-found: error

    - name: Save current version
      run: echo "${{ env.CURRENT_VERSION }}" > last_version.txt
      shell: bash
