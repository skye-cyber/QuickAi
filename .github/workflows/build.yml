name: Build Electron App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [win32, darwin, linux]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.18.1'
        npm-version: '10.9.2'

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

    - name: Install build tools
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential || { echo "Failed to install build tools"; exit 1; }

    - name: Install dependencies
      run: npm install --no-cache --verbose --force --no-audit || { echo "Failed to install dependencies"; exit 1; }

    - name: Ensure build directory exists
      run: mkdir -p dist || { echo "Failed to create dist directory"; exit 1; }

    - name: Set platform for win32 to (win, windows)
      run: echo "PLATFORM=${{ matrix.platform == 'win32' && 'win' || matrix.platform }}" >> $GITHUB_ENV
    - name: Set platform for darwin to (macos,mac)
      run: echo "PLATFORM=${{ matrix.platform == 'darwin' && 'macos' || matrix.platform }}" >> $GITHUB_ENV

    - name: Build for ${{ env.PLATFORM }}
      run: |
        npm run dist -- --${{ env.PLATFORM }}
        if [ $? -ne 0 ]; then
          echo "Build failed for platform: ${{ env.PLATFORM }}"
          exit 1
        fi
      env:
        CI: true
        
    - name: Check if build directory exists
      run: |
        if [ ! -d "dist" ]; then
          echo "Error: dist directory not found."
          exit 1
        fi

    - name: Get version from package.json
      id: get_version
      run: echo "VERSION=$(node -p \"require('./package.json').version\")" >> $GITHUB_ENV || { echo "Failed to get version from package.json"; exit 1; }

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: electron-app-${{ env.VERSION }}-${{ env.PLATFORM }}
        path: |
          dist/QuickAi_${{ env.VERSION }}_amd64.deb
          dist/QuickAi_${{ env.VERSION }}_amd64.exe
          dist/QuickAi_${{ env.VERSION }}_amd64.AppImage
        if-no-files-found: error
