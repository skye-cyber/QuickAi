{"version":3,"file":"packed_fileHandler.js","mappings":"MAAA,IAAMA,EAAYC,SAASC,eAAe,aACpCC,EAAWF,SAASC,eAAe,YACnCE,EAAgBH,SAASC,eAAe,iBAExCG,GADeJ,SAASC,eAAe,gBACdD,SAASC,eAAe,kBACjDI,EAAcL,SAASC,eAAe,eACtCK,EAAcN,SAASC,eAAe,eACtCM,EAAcP,SAASC,eAAe,eAc5C,SAASO,IACLL,EAAcM,UAAUC,IAAI,UAE5BX,EAAUY,MAAQ,GAClBL,EAAYK,MAAQ,GACpBP,EAAuBQ,UAAY,wFAEvC,CA0DA,SAASC,EAAYC,GAMjB,IALA,IAAMC,EAAmBf,SAASC,eAAe,iBAC7Ce,EAAW,EAEXC,GAAQ,EACRC,EAAW,GACNC,EAAI,EAAGA,EAAIL,EAAMM,OAAQD,IAAK,CACnC,IAAME,EAAOP,EAAMK,GAGbG,EAAUD,EAAKE,KAAKC,WAAW,UAC/BC,EAAWH,EAAU,QAAU,WAIrC,GAHAI,OAAOD,SAAWA,EAGdH,EAAS,CAEJL,IACDb,EAAuBQ,UAAY,GACnCK,GAAQ,GAGZD,GAAY,EAEZW,QAAQC,IAAI,iBAAkBP,EAAKQ,KAAMR,EAAKE,KAAMF,EAAKS,MAEzD9B,SAASC,eAAe,eAAeQ,UAAUC,IAAI,UACrD,IAAMqB,EAAc/B,SAASgC,cAAc,OAC3CD,EAAYE,UAAY,sFACxBF,EAAYnB,UAAY,ijBAAHsB,OAKoFb,EAAKQ,KAAI,uLAAAK,QAEqBb,EAAKS,KAAO,SAAeK,QAAQ,GAAE,kCAE5KpB,EAAiBqB,YAAYL,GAC7B,IAAMM,EAAS,IAAIC,WAGnBZ,OAAOa,aAAed,EACtBY,EAAOG,OAAS,SAACC,GACb,IAAMC,EAAeD,EAAEE,OAAOC,OAC9B1B,EAAS2B,KAAKH,EAClB,EACAL,EAAOS,cAAczB,EACzB,MACIK,OAAOqB,cAAc,kCAAmC,WACxDC,YAAW,WACPtB,OAAOuB,WAAW,UACtB,GAAG,IAEX,CAEAvB,OAAOwB,YAAchC,EAGjBF,EAAW,IACXhB,SAASC,eAAe,gBAAgBkD,YAAc,GAAHjB,OAAMlB,EAAQ,kCAEzE,CAwBA,SAASoC,IACL,IAAMV,EAAehB,OAAOwB,YACtBzB,EAAWC,OAAOa,aAClBc,EAAO/C,EAAYK,MACzB,GAAI+B,GAAgBW,EAAM,CAEtB,IAAMC,EAAQ,IAAIC,YAAY,cAAe,CAAEC,OAAQ,CAAEN,YAA0BG,KAAMA,EAAM5B,SAAUA,KACzGzB,SAASyD,cAAcH,GACvBtD,SAASC,eAAe,eAAeQ,UAAUiD,OAAO,UACxDlD,IACA,IAAMmD,EAAc3D,SAASC,eAAe,eAC5C0D,GAAcA,EAAYlD,UAAUC,IAAI,SAC5C,MACSgC,EAKOW,IACR3B,OAAOqB,cAAc,+CAAgD,WACrEC,YAAW,WACPtB,OAAOuB,WAAW,UACtB,GAAG,OARHvB,OAAOqB,cAAc,wBAAyB,WAC9CC,YAAW,WACPtB,OAAOuB,WAAW,UACtB,GAAG,KAQf,CA5LA5C,EAAYuD,iBAAiB,SAQ7B,WACIzD,EAAcM,UAAUiD,OAAO,SACnC,IARuB1D,SAASC,eAAe,mBAChC2D,iBAAiB,SAAS,SAACnB,GACtCA,EAAEoB,kBACFrD,GACJ,IAeAL,EAAcyD,iBAAiB,SAAS,SAACN,GACb,kBAApBA,EAAMX,OAAOmB,IACb3D,EAAcM,UAAUC,IAAI,SAEpC,IAEAX,EAAU6D,iBAAiB,UAwB3B,SAA0BN,GAEtBzC,EADcyC,EAAMX,OAAO7B,MAE/B,IAxBAZ,EAAS0D,iBAAiB,YA0B1B,SAAwBN,GACpBA,EAAMO,kBACNP,EAAMS,iBAGFT,EAAMX,OAAOqB,QAAQ,eACrBV,EAAMW,aAAaC,WAAa,OAExC,IAlCsD,GACtDhE,EAAS0D,iBAAiB,QAmC1B,SAAwBN,GACpBA,EAAMO,kBACNP,EAAMS,iBAGFT,EAAMX,OAAOqB,QAAQ,cAErBnD,EADcyC,EAAMW,aAAanD,MAGzC,IA5CkD,GAGlDZ,EAAS0D,iBAAiB,SAAS,SAASN,GAEhB,iBAApBA,EAAMX,OAAOmB,IAAyBR,EAAMX,OAAOqB,QAAQ,mBAM/DV,EAAMO,kBACNP,EAAMS,iBAGFT,EAAMX,OAAOqB,QAAQ,cACrBjE,EAAUoE,QAElB,IA4FA5D,EAAYqD,iBAAiB,SAAS,SAACN,GAClCA,EAAMS,iBACPX,GACJ,IAEA7C,EAAYqD,iBAAiB,WAAW,SAACnB,GACvB,UAAVA,EAAE2B,KAAoB3B,EAAE4B,WACxB5B,EAAEsB,iBACgBO,UAAUnB,YAAYoB,SAIpCjE,EAAY6C,YAAc,GAE1B7C,EAAYkE,MAAMC,OAAS,OAC3BnE,EAAYkE,MAAMC,OAASC,KAAKC,IAAIL,UAAUM,aAAc,GAAKlD,OAAOmD,YAAc,KAAO,KAC7FvE,EAAYwE,UAAYR,UAAUM,aAClCxB,KAGZ,IA6BA1B,OAAO0B,mBAAqBA,EAC5B1B,OAAOlB,eAAiBA,C","sources":["webpack://QuickAi/./src/renderer/js/Utils/fileHandler.js"],"sourcesContent":["const fileInput = document.getElementById('fileInput');\nconst dropZone = document.getElementById('dropZone');\nconst dropZoneModal = document.getElementById('dropZoneModal');\nconst dropZoneText = document.getElementById('dropZoneText');\nconst uploadedFilesContainer = document.getElementById('uploadedFiles');\nconst attachFiles = document.getElementById(\"AttachFiles\");\nconst imagePrompt = document.getElementById(\"imagePrompt\");\nconst submitImage = document.getElementById(\"submitImage\");\n\nattachFiles.addEventListener(\"click\", OpenFileModal);\n\nconst FileModalClose = document.getElementById(\"closeFileEModal\");\nFileModalClose.addEventListener(\"click\", (e) => {\n    e.stopPropagation();\n    CloseFileModal();\n});\n\nfunction OpenFileModal() {\n    dropZoneModal.classList.remove('hidden')\n}\n\nfunction CloseFileModal() {\n    dropZoneModal.classList.add('hidden');\n    // Clear file input and prompt\n    fileInput.value = \"\";\n    imagePrompt.value = \"\";\n    uploadedFilesContainer.innerHTML = `<span class=\"font-bold text-cyan-600 dark:text-teal-400\">No files uploaded yet.</span>`;\n    //dropZoneText.textContent = \"Drag and drop files here or click to select\";\n}\n\ndropZoneModal.addEventListener('click', (event) =>{\n    if (event.target.id === \"dropZoneModal\"){\n        dropZoneModal.classList.add('hidden')\n    }\n})\n// Handle file selection\nfileInput.addEventListener('change', handleFileSelect);\n\n// Handle drag and drop\ndropZone.addEventListener('dragover', handleDragOver, false);\ndropZone.addEventListener('drop', handleFileDrop, false);\n\n// Handle click on drop zone to trigger file input\ndropZone.addEventListener('click', function(event) {\n    // Check if the clicked element or any of its parents is the modalTrigger\n    if (event.target.id === \"modalTrigger\" || event.target.closest(\"#modalTrigger\")) {\n        // If it is, do nothing (prevent fileInput click)\n        return;\n    }\n\n    // Prevent the default click behavior\n    event.stopPropagation();\n    event.preventDefault();\n\n    // Check if the clicked element is within the dropZone\n    if (event.target.closest(\"#dropZone\")) {\n        fileInput.click();\n    }\n});\n\nfunction handleFileSelect(event) {\n    const files = event.target.files;\n    handleFiles(files);\n}\n\nfunction handleDragOver(event) {\n    event.stopPropagation();\n    event.preventDefault();\n\n    // Check if the dragged over element or its parent is the dropZone\n    if (event.target.closest(\"#dropZone\")) {\n        event.dataTransfer.dropEffect = 'copy';\n    }\n}\n\nfunction handleFileDrop(event) {\n    event.stopPropagation();\n    event.preventDefault();\n\n    // Check if the dragged over element or its parent is the dropZone\n    if (event.target.closest(\"#dropZone\")) {\n        const files = event.dataTransfer.files;\n        handleFiles(files);\n    }\n}\n\nfunction handleFiles(files) {\n    const previewContainer = document.getElementById('uploadedFiles');\n    let Uploaded = 0\n    //Create a list to hold file urls\n    let clear = false\n    let fileUrls = []\n    for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n\n        // Determine if the file is an image or a document\n        const isImage = file.type.startsWith('image/');\n        const fileType = isImage ? 'image' : 'document';\n        window.fileType = fileType;\n\n        // Convert the file to a data URL if it's an image\n        if (isImage) {\n            //Remove content from preview container\n            if (!clear){\n                uploadedFilesContainer.innerHTML = \"\";\n                clear = true;\n            }\n\n            Uploaded += 1;\n            // Create a list item for the file\n            console.log('File uploaded:', file.name, file.type, file.size);\n            // Hide svgbefore displaying files\n            document.getElementById('dropZoneSVG').classList.add('hidden')\n            const previewItem = document.createElement('div');\n            previewItem.className = 'flex items-center justify-between px-4 py-2 bg-gray-100 dark:bg-gray-700 rounded-lg';\n            previewItem.innerHTML = `\n                      <div class=\"flex items-center overflow-auto scrollbar-hide p-4 w-full\">\n                          <svg class=\"fill-current h-6 w-6 text-gray-500 mr-1\" role=\"img\" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                              <path d=\"M9 2a2 2 0 00-2 2v8a2 2 0 002 2h2v4a2 2 0 002 2h2a2 2 0 002-2v-4h2a2 2 0 002-2V4a2 2 0 00-2-2H9z\"></path>\n                          </svg>\n                          <p class=\"flex text-gray-800 dark:text-stone-300 w-full text-ellipsis whitespace-nowrap\">${file.name}</p>\n                      </div>\n                      <span class=\"p-1 border-l border-bg-stone-400 rounded-md bg-blue-400 dark:bg-stone-300 text-gray-700 dark:text-zinc-950\">${((file.size / (1024 * 1024)).toFixed(2))} MB</span>\n                  `;\n            previewContainer.appendChild(previewItem);\n            const reader = new FileReader();\n\n            const AllfileTypes = \"image\";\n            window.AllfileTypes = fileType //AllfileTypes\n            reader.onload = (e) => {\n                const imageDataUrl = e.target.result;\n                fileUrls.push(imageDataUrl);\n            };\n            reader.readAsDataURL(file);\n        } else {\n            window.displayStatus(\"Unsupported files were ignored!\", \"success\");\n            setTimeout(()=>{\n                window.hideStatus('success')\n            }, 3000)\n        }\n    }\n    // Store the image data URL in the global window object\n    window.fileDataUrl = fileUrls;\n\n    // Update the drop zone text if files are uploaded\n    if (Uploaded > 0) {\n        document.getElementById(\"dropZoneText\").textContent = `${Uploaded} File(s) uploaded successfully`;\n    }\n}\n\nsubmitImage.addEventListener('click', (event) =>{\n     event.preventDefault();\n    submitImageAndText()\n});\n\nsubmitImage.addEventListener(\"keydown\", (e) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n        e.preventDefault();\n        const inputText = userInput.textContent.trim();\n\n        if (inputText) {\n            //Reset the input field content\n            imagePrompt.textContent = \"\";\n            // Reset th input field size/height\n            imagePrompt.style.height = 'auto';\n            imagePrompt.style.height = Math.min(userInput.scrollHeight, 28 * window.innerHeight / 100) + 'px';\n            imagePrompt.scrollTop = userInput.scrollHeight;\n            submitImageAndText();\n        }\n    }\n});\n\nfunction submitImageAndText() {\n    const imageDataUrl = window.fileDataUrl;\n    const fileType = window.AllfileTypes;\n    const text = imagePrompt.value;\n    if (imageDataUrl && text) {\n        // Dispatch an event with the image data URL and text\n        const event = new CustomEvent('imageLoaded', { detail: { fileDataUrl: fileDataUrl, text: text, fileType: fileType } });\n        document.dispatchEvent(event);\n        document.getElementById('dropZoneSVG').classList.remove('hidden')\n        CloseFileModal();\n        const suggestions = document.getElementById('suggestions')\n        suggestions ? suggestions.classList.add('hidden') : '';\n    } else {\n        if (!imageDataUrl) {\n            window.displayStatus(\"Please select a file!\", \"success\");\n            setTimeout(()=>{\n                window.hideStatus('success')\n            }, 3000)\n        } else if (!text) {\n            window.displayStatus(\"Please Enter a prompt relating to the upload\", \"success\");\n            setTimeout(()=>{\n                window.hideStatus('success')\n            }, 3000)\n        }\n    }\n}\n\nwindow.submitImageAndText = submitImageAndText;\nwindow.CloseFileModal = CloseFileModal;\n"],"names":["fileInput","document","getElementById","dropZone","dropZoneModal","uploadedFilesContainer","attachFiles","imagePrompt","submitImage","CloseFileModal","classList","add","value","innerHTML","handleFiles","files","previewContainer","Uploaded","clear","fileUrls","i","length","file","isImage","type","startsWith","fileType","window","console","log","name","size","previewItem","createElement","className","concat","toFixed","appendChild","reader","FileReader","AllfileTypes","onload","e","imageDataUrl","target","result","push","readAsDataURL","displayStatus","setTimeout","hideStatus","fileDataUrl","textContent","submitImageAndText","text","event","CustomEvent","detail","dispatchEvent","remove","suggestions","addEventListener","stopPropagation","id","preventDefault","closest","dataTransfer","dropEffect","click","key","shiftKey","userInput","trim","style","height","Math","min","scrollHeight","innerHeight","scrollTop"],"sourceRoot":""}