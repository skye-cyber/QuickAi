import { HfInference } from "@huggingface/inference";
import { marked } from "marked";
import hljs from 'highlight.js';
import { get_key } from './Pcrypto.js';

let h_faceKey = null; // Define h_faceKey globally

window.electron.getEnv().then(env => {
    const encryptedOBJ = {
        iv: env.IV,
        encryptedData: env.API_OBJ
    };

    const SKEY = env.SKEY;
    const keyObject = get_key(encryptedOBJ, SKEY);

    keyObject.then(result => {
        h_faceKey = result;
        const client = new HfInference(h_faceKey);
        initChat(client);
    }).catch(error => {
        console.error("Error:", error);
    });
});

function initChat(client) {
    const chatArea = document.getElementById("chatArea");
    const userInput = document.getElementById("userInput");
    const sendBtn = document.getElementById("sendBtn");
    const modeSelect = document.getElementById('mode');

    // Custom instructions
    const customInstructions = `
    Your name is QuickAi. You are deployed in a cross-platform application built on Electron by Wambua, also known as Skye. He is an undergraduate software developer at Kirinyaga University in Kenya. He has mastered many digital technologies, including but not limited to: HTML5, CSS3, JavaScript, TailwindCSS, Node.js, Python, Django, Git, MySQL/MariaDB, Markdown, GIMP (GNU Image Manipulation Program), scikit-learn, and OpenCV. You can find him on his [GitHub Profile](https://github.com/skye-cyber) or [Huggingface Profile](https://huggingface.co/skye-waves).
    Your primary goal is to assist the user in all the needs. You should be brief and direct to the point based on the user's needs. You are required to use TailwindCSS for styling unless the user requests otherwise.
    When interacting with the user:
    - You are allowed but not required to begin by introducing yourself and optionally mentioning your: deployer/creator, goal unless you've done previous done so. However, if the user starts the interaction by directly diving into the problem/question at hand, you can skip the introduction.
    - Further information about yourself or your creator(wambua) shall only be revealed when explicitly requested for.
    - If the user needs to visualize/preview diagrams or generate images, inform them that you cannot directly generate diagrams or images. Instead, come up with a query describing what you or the user would wish to visualize, and instruct them to paste this prompt in the text area starting with '/image' to generate the image.
    - If it is not clear what image the user wants to generate, ask them for a description of what they want, and then restructure it to form a clear prompt for the user.
    - For diagrams, if the user is not satisfied with the image generation method, offer to provide them with DOT code and instructions on how to use it. You can also inform them to activate the checkbox with the text 'Use Flux 4 Image Generation' appearing at the top of the chat area, which will use a different approach to generate the image or diagram.
    - In a conversation, accertain the relationship between previous conversation to the currect interraction.
    - Engage user by asking questions.
    For drawing table:
    - Default table preview/visuualization is html except when user request otherwise.
    - For table previews no code should be shown.
    - For HTML tables, write the HTML code without the 'html' language identifier. For Markdown tables, omit the 'markdown' identifier.
    - Use CSS styling to make the table visually appealing, avoiding TailwindCSS.
    Use colors that are more visible than light gray, such as deep gray or other contrasting colors.
    - Ensure the table has a more visible outer border to distinguish it from the rest of the content.
    - For prompts starting with "create a table" or "draw a table," provide a visually appealing table unless otherwise instructed.

    - You're adviced to use visualy apealing tables to explain concepts in cases where user prefers so or in where concepts are better understood in table form.
    - When generating html codes in cases where you are not using tailwindcss, you can use the concept of tables mentioned earlier to show the user how the result will look like, this you can do by writting the same html code but omiting the langauge identifier 'html'.
    - You can use html to make the your response more ellegant and appealing to te user in wich case you would omit the html identifier and use inline css for styling.
    `;

    let conversationHistory = [{ role: "system", content: customInstructions }];

    // Initialize highlight.js
    hljs.configure({ ignoreUnescapedHTML: true });

    // Custom renderer for syntax highlighting
    const renderer = new marked.Renderer();
    renderer.code = function (code, language) {
        // Handle case where `code` is an object
        const validLanguage = code.lang || 'plaintext';
        console.log(`Language: ${validLanguage}`);
        if (typeof code === "object" && code.text !== undefined) {
            code = code.text; // Extract the actual code
        }

        if (typeof code !== "string" || code.trim() === "") {
            console.warn("Empty or invalid code provided:", code);
            code = "// No code provided"; // Default fallback for empty code
        }

        // Highlight the code
        let highlighted;
        try {
            highlighted = hljs.highlight(code, { language: validLanguage }).value;
        } catch (error) {
            console.error("Highlighting error:", error);
            highlighted = hljs.highlightAuto(code).value; // Fallback to auto-detection
        }

        // Generate unique ID for the copy button
        const copyButtonId = `copy-button-${Math.random().toString(36).substring(2, 9)}`;

        return `
        <div class="relative my-auto p-2 border border-gray-300 dark:border-gray-900 bg-white dark:bg-gray-800 rounded-md">
        <button id="${copyButtonId}"
        class="copy-button absolute rounded-md px-2 py-2 right-2 top-2 bg-gradient-to-r from-sky-800 to-purple-600 hover:bg-blue-400 text-white border border-2 cursor-pointer opacity-80 hover:opacity-50 dark:bg-gray-800">
        Copy
        </button>
        <pre class="rounded-md dark:bg-gray-700">
        <code class="hljs ${validLanguage} dark:bg-gray-950">${highlighted}</code>
        </pre>
        </div>
        `;
    };

    // Configure marked.js
    marked.setOptions({
        renderer: renderer,
        highlight: function (code, lang) {
            // Handle case where `code` is an object
            const validLanguage = code.lang || 'plaintext';
            if (typeof code === "object" && code.text !== undefined) {
                code = code.text; // Extract the actual code
            }

            if (typeof code !== "string" || code.trim() === "") {
                console.warn("Empty or invalid code provided:", code);
                code = "// No code provided"; // Default fallback for empty code
            }

            try {
                return hljs.highlight(code, { language: validLanguage }).value;
            } catch (error) {
                console.error("Highlighting error:", error);
                return hljs.highlightAuto(code).value; // Fallback to auto-detection
            }
        },
        breaks: true,
    });



    function addCopyListeners() {
        document.querySelectorAll('.copy-button').forEach(button => {
            button.addEventListener('click', async function() {
                const codeBlock = this.nextElementSibling.querySelector('code');
                const textToCopy = codeBlock.innerText;
                try {
                    await navigator.clipboard.writeText(textToCopy);
                    this.textContent = 'Copied!';
                    setTimeout(() => {
                        this.textContent = 'Copy';
                    }, 3000);
                } catch (err) {
                    console.error('Failed to copy: ', err);
                }
            });
        });
    }

    async function generateImage(data, useFlux = false) {
        const url = useFlux ? "https://api-inference.huggingface.co/models/black-forest-labs/FLUX.1-dev" :
        "https://api-inference.huggingface.co/models/stabilityai/stable-diffusion-3.5-large";
        //console.log(url);
        try {
            const response = await fetch(url, {
                headers: {
                    Authorization: `Bearer ${h_faceKey}`,
                    "Content-Type": "application/json",
                },
                method: "POST",
                body: JSON.stringify(data),
            });
            const blob = await response.blob();
            return URL.createObjectURL(blob);
        } catch (error) {
            console.error("Image generation error:", error);
            return null;
        }
    }

    function escapeHTML(unsafe) {
        if (typeof unsafe !== 'string') {
            return '';
        }
        return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
    }

    async function classifyText(text) {
        const isImageRequest = text.startsWith("/image");
        const escapedText = escapeHTML(text);

        // Display user message
        const userMessageId = `msg_${Math.random().toString(34).substring(3, 9)}`;
        const copyButtonId = `copy-button-${Math.random().toString(36).substring(5, 9)}`;
        const userMessage = document.createElement("div");
        userMessage.innerHTML = `
        <div data-id="${userMessageId}" class="relative bg-gradient-to-tl from-sky-600 to-fuchsia-800 dark:from-purple-700 dark:to-pink-700 text-white dark:text-gray-100 rounded-lg p-2 font-normal dark:shadow-cyan-500/50  md:p-3 shadow-md w-fit max-w-full lg:max-w-5xl">
        <p class="whitespace-pre-wrap break-words max-w-xl md:max-w-2xl lg:max-w-3xl">${escapedText}</p>
        <button id="${copyButtonId}" class="user-copy-button absolute rounded-md px-2 py-2 right-1 bottom-0.5 bg-gradient-to-r from-indigo-400 to-pink-400 dark:from-gray-700 dark:to-gray-900 hover:bg-indigo-200 dark:hover:bg-gray-600 text-white dark:text-gray-100 rounded-lg p-2 font-semibold border border-2 cursor-pointer opacity-80 hover:opacity-50">
        Copy
        </button>
        </div>`;
        userMessage.classList.add("flex", "justify-end", "mb-4", "overflow-wrap");
        chatArea.appendChild(userMessage);
        implementUserCopy();
        chatArea.scrollTop = chatArea.scrollHeight;
        if (!isImageRequest) {
            conversationHistory.push({ role: "user", content: text });
        }

        if (isImageRequest) {
            const imageData = { inputs: text.replace("/image", "").trim() };
            const imageId = `image_${Math.random().toString(36).substring(2, 7)}`;
            const loadingMessage = document.createElement("div");
            loadingMessage.innerHTML = `
            <div id="${imageId}" class="w-fit bg-gray-200 text-gray-800 dark:bg-gradient-to-tl dark:from-teal-700 dark:to-cyan-700 dark:text-gray-100 rounded-lg p-2 font-normal shadow-lg dark:shadow-blue-500 max-w-3xl mb-[7%] lg:mb-[5%]">
            <div class="space-x-2 flex">
            <div class="bg-blue-500 dark:bg-cyan-400 w-2 h-2 xl:w-3 xl:h-3 rounded-full animate-bounce"></div>
            <div class="bg-blue-400 dark:bg-sky-400 w-2 h-2  xl:w-3 xl:h-3 rounded-full animate-bounce-200"></div>
            <div class="bg-rose-700 dark:bg-orange-700 w-2 h-2  xl:w-3 xl:h-3 rounded-full animate-bounce-400"></div>
            <span class="text-sm text-gray-700 dark:text-gray-200">0s</span>
            </div>
            </div>
            `;
            chatArea.appendChild(loadingMessage);
            chatArea.scrollTop = chatArea.scrollHeight;
            let secondsElapsed = 0;
            const timerInterval = setInterval(() => {
                secondsElapsed++;
                loadingMessage.querySelector('span').textContent = `${secondsElapsed}s`;
            }, 1000);

            const useFlux = document.getElementById('CModel').checked;
            const imageUrl = await generateImage(imageData, useFlux);
            clearInterval(timerInterval);

            if (imageUrl) {
                const imageContainer = document.createElement("div");
                imageContainer.classList.add("relative", "mb-[5%]")
                const imageElement = document.createElement("img");
                imageElement.src = imageUrl;
                imageElement.classList.add("rounded-lg", "shadow-lg", "mt-4", "max-w-xs", "cursor-pointer");
                imageElement.addEventListener("click", () => {
                    if (imageElement.requestFullscreen) {
                        imageElement.requestFullscreen();
                    } else if (imageElement.webkitRequestFullscreen) {
                        imageElement.webkitRequestFullscreen();
                    } else if (imageElement.msRequestFullscreen) {
                        imageElement.msRequestFullscreen();
                    }
                });

                const downloadButtonContainer = document.createElement("button");
                downloadButtonContainer.classList.add("absolute", "flex", "items-center", "text-white", "rounded-bl-md", "bg-gradient-to-r", "from-blue-500", "to-purple-500", "hover:from-blue-600", "hover:to-purple-600", "font-semibold", "py-2", "px-4", "focus:outline-none", "shadow-md", "w-fit", "h-fit", "bottom-0", "left-0", "opacity-60", "hover:opacity-100");

                const downloadButton = document.createElement("a");
                downloadButton.classList.add("flex", "items-center", "text-white", "no-underline");
                downloadButton.href = imageUrl;
                downloadButton.download = "generated_image.png";
                downloadButton.innerHTML = `
                <div class="flex items-center">
                <span>Download</span>
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="ml-2">
                <path fill-rule="evenodd" clip-rule="evenodd" d="M12 21C11.7348 21 11.4804 20.8946 11.2929 20.7071L4.29289 13.7071C3.90237 13.3166 3.90237 12.6834 4.29289 12.2929C4.68342 11.9024 5.31658 11.9024 5.70711 12.2929L11 17.5858V4C11 3.44772 11.4477 3 12 3C12.5523 3 13 3.44772 13 4V17.5858L18.2929 12.2929C18.6834 11.9024 19.3166 11.9024 19.7071 12.2929C20.0976 12.6834 20.0976 13.3166 19.7071 13.7071L12.7071 20.7071C12.5196 20.8946 12.2652 21 12 21Z" fill="currentColor"></path>
                </svg>
                </div>
                `;

                downloadButtonContainer.appendChild(downloadButton);
                document.body.appendChild(downloadButtonContainer);

                downloadButtonContainer.appendChild(downloadButton);
                imageContainer.appendChild(imageElement);
                imageContainer.appendChild(downloadButtonContainer);

                loadingMessage.innerHTML = '';
                loadingMessage.appendChild(imageContainer);
            } else {
                loadingMessage.innerHTML = `
                <div id="${imageId}" class="w-fit bg-red-400 text-gray-950 dark:bg-rose-500 rounded-lg p-2 font-normal shadow-lg dark:shadow-red-500 max-w-3xl mb-[5%]">
                <span class="text-sm text-gray-950 dark:text-black">Could not Process request!⚠️</span>
                </div>
                `;
            }
        } else {
            const mode = modeSelect.value;
            let model = "Qwen/Qwen2.5-72B-Instruct";
            if (mode === 'Coding mode') {
                model = "Qwen/Qwen2.5-Coder-32B-Instruct";
            }

            const aiMessage = document.createElement("div");
            aiMessage.innerHTML = `
            <div class="bg-gray-200 text-gray-800 dark:bg-gradient-to-tl dark:from-teal-700 dark:to-cyan-700 dark:text-black rounded-lg p-2 font-normal shadow-lg dark:shadow-blue-500 p-3 max-w-3xl mb-4">
            <div class="loader space-x-2 flex">
            <div class="bg-blue-500 dark:bg-cyan-400 w-2 h-2 lg:w-3 lg:h-3 rounded-full animate-bounce"></div>
            <div class="bg-blue-400 dark:bg-sky-400 w-2 h-2 lg:w-3 lg:h-3 rounded-full animate-bounce-200"></div>
            <div class="bg-rose-700 dark:bg-orange-700 w-2 h-2 lg:w-3 lg:h-3 rounded-full animate-bounce-400"></div>
            </div>
            </div>`;

            const aiMessageUId = `msg_${Math.random().toString(30).substring(3,9)}`;
            aiMessage.classList.add(aiMessageUId, "flex", "justify-start", "mb-[6%]");
            chatArea.appendChild(aiMessage);
            chatArea.scrollTop = chatArea.scrollHeight;

            try {
                const stream = client.chatCompletionStream({
                    model: model,
                    messages: conversationHistory,
                    max_tokens:10000
                });

                let output = "";
                for await (const chunk of stream) {
                    /*
                    if (chunk?.choices?.length > 0) {
                        output += chunk.choices[0].delta.content;*/
                    const choice = chunk?.choices?.[0];
                    if (choice?.delta?.content) {
                        output += choice.delta.content;
                        // Update innerHTML with marked output
                        aiMessage.innerHTML = `<div class="${aiMessageUId} bg-gray-200 text-gray-800 dark:bg-gradient-to-tl dark:from-blue-500 dark:to-sky-500 dark:text-black rounded-lg p-2 font-normal shadow-lg dark:shadow-blue-500 p-3 w-fit max-w-full lg:max-w-6xl mb-6">${marked(output)}</div>`;

                        addCopyListeners(); // Assuming this function adds copy functionality to code blocks
                        // Debounce MathJax rendering to avoid freezing
                        debounceRenderMathJax();
                    }

                }

                // Store conversation history
                conversationHistory.push({ role: "assistant", content: output });

            } catch (error) {
                // Handle request error appropriately
                if (error.message === "Failed to fetch") {
                    handleRequestError(error, userMessage, aiMessage, conversationHistory);
                } else {
                    console.log(error.message)
                }
            }
        }

    }

    // Function to ensure MathJax renders dynamically injected content
    let renderTimeout;

    function debounceRenderMathJax(delay = 300) {
        if (renderTimeout) clearTimeout(renderTimeout);
        renderTimeout = setTimeout(() => {
            if (window.MathJax) {
                MathJax.typesetPromise(Array.from(document.querySelectorAll('[class^="msg_"], [class*=" msg_"]'))) //Apply mathjax to only the specified field
                .then(() => console.log("MathJax rendering complete"))
                .catch((err) => console.error("MathJax rendering error:", err.message));
            } else {
                console.error("MathJax is not loaded or available.");
            }
        }, delay);
    }


    function handleRequestError(error, userMessage, aiMessage, conversationHistory) {
        try {
            console.log(`Intercepted '${error}`);
            const errorContainer = document.getElementById('errorContainer');
            const errorArea = document.getElementById('errorArea');
            const closeModal = document.getElementById('closeEModal');
            const retry = document.getElementById('retry');
            const lastMessage = conversationHistory.slice(-1)[0]?.content; // Safely access the last message

            // Remove existing event listeners before adding a new one
            const retryHandler = () => {
                if (aiMessage) aiMessage.remove();
                if (userMessage) userMessage.remove();

                // Retry action
                classifyText(lastMessage);
                console.log('Retry action triggered with:', lastMessage);
                errorContainer.classList.add('hidden');
            };

            retry.replaceWith(retry.cloneNode(true)); // Reset `retry` to remove all attached event listeners
            const newRetry = document.getElementById('retry'); // Re-fetch the newly cloned `retry` button
            newRetry.addEventListener('click', retryHandler);

            closeModal.addEventListener('click', () => errorContainer.classList.add('hidden'));

            // Function to show the modal with an error message
            function showError() {
                errorContainer.classList.remove('hidden');
                errorArea.textContent = "An error occurred during response. Retry?";
                conversationHistory.pop(); // Remove the last conversation entry
            }

            showError();
        } catch (err) {
            console.error('Error handling request error:', err);
        }
    }

    function implementUserCopy() {
        document.querySelectorAll('.user-copy-button').forEach(button => {
            const buttonParent = button.parentElement;
            const textBlock = buttonParent.querySelector('p');

            if (textBlock && textBlock.innerHTML.length < 50) {
                button.style.display = 'none';
            }

            button.addEventListener('click', async function() {
                const textToCopy = textBlock.innerText;

                if (textToCopy.length >= 50) {
                    try {
                        await navigator.clipboard.writeText(textToCopy);
                        this.textContent = 'Copied!';
                        setTimeout(() => {
                            this.textContent = 'Copy';
                        }, 3000);
                    } catch (err) {
                        console.error('Failed to copy: ', err);
                    }
                }
            });
        });
    }

    sendBtn.addEventListener("click", () => {
        const inputText = userInput.value.trim();
        if (inputText) {
            userInput.value = "";
            classifyText(inputText);
            document.getElementById('suggestions').classList.add('hidden')
        }
    });

    userInput.addEventListener("keydown", (e) => {
        if (e.key === "Enter" && !e.shiftKey) {
            const inputText = userInput.value.trim();
            if (inputText) {
                userInput.value = "";
                classifyText(inputText);
                document.getElementById('suggestions').classList.add('hidden')
            }
        }
    });

}
